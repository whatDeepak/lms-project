datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum UserRole {
  ADMIN
  TEACHER
  USER
}

model User {
  id              String           @id @default(cuid()) @map("_id")
  name            String?
  rollNo          String?          @default("")
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole?        @default(USER)
  accounts        Account[]
  checkInDates    DateTime[]       @default([])  // New field to store check-in dates
  notifications   Notification[] 
  quizAttempts    QuizAttempt[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Teacher {
  id    String @id @default(cuid()) @map("_id")
  email String @unique
}

model Course {
  id          String  @id @default(cuid()) @map("_id")
  userId      String
  title       String
  description String?
  imageUrl    String?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters        Chapter[]
  attachments     Attachment[]
  purchases       Purchase[]
  watchLater      WatchLater[]
  favoriteCourses FavoriteCourse[]
  announcements   Announcement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(cuid()) @map("_id")
  name    String   @unique
  courses Course[]
}
model Announcement {
  id        String   @id @default(cuid()) @map("_id")
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}
model Notification {
  id            String   @id @default(cuid()) @map("_id")
  userId        String
  courseId      String
  announcementId String
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([courseId])
}


model Attachment {
  id   String @id @default(cuid()) @map("_id")
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(cuid()) @map("_id")
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(true)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  quizzes Quiz[]
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Quiz {
  id          String  @id @default(cuid()) @map("_id")
  title       String
  description String?
  timeline    Int // in minutes
  isPublished Boolean @default(false)
  position    Int

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  questions Question[]
  quizAttempts    QuizAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Question {
  id         String   @id @default(cuid()) @map("_id")
  text       String
  type       QuestionType
  option1    String?  // Individual options
  option2    String?
  option3    String?
  option4    String?
  answer     String?  // Single answer field

  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([quizId])
}

enum QuestionType {
  NORMAL
  MCQ
}

model QuizAttempt {
  id         String      @id @default(cuid()) @map("_id")
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId     String
  quiz       Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score      Int
  answers    Json        // Store answers in JSON format
  createdAt  DateTime    @default(now())

  @@unique([userId, quizId])
}


model UserProgress {
  id     String @id @default(cuid()) @map("_id")
  userId String

  chapterId         String
  chapter           Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  watchedPercentage Int     @default(0) // New field to store the percentage watched

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(cuid()) @map("_id")
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model WatchLater {
  id       String @id @default(cuid()) @map("_id")
  userId   String
  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model FavoriteCourse {
  id       String @id @default(cuid()) @map("_id")
  userId   String
  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}
